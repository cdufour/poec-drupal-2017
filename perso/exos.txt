*** EXOS ***

---
Créer une nouvelle page "Test"
Afficher sur la page :
du texte Lorem ipsum
+ 2 photos placées l'une à côté de l'autre sous le texte
Inclure cette page dans le menu principal
URL de la page: /test
---

---
Désactiver (masquer) les tags des articles affichés en mode Teaser
---
---

Créer une nouvelle vue "Teams" affichant la totalité
des équipes. Cette vue devra être accessible depuis
la navigation principale (nouvel onglet dans le menu)
On affichera uniquement le nom de l'équipe
---

---
Ajouter un champ (field) "goals" au content-type Player
Mettre à jour quelques joueurs en leur attribuant
un certain nombre de buts
Afficher dans la région Sidebar-first un block
affichant les 3 meilleurs buteurs par ordre
de buts marqués. Exemple:
Del Piero (300)
Cavani (120)
Buffon (0)
---


---
Permettre au rôle Schiavo de créer/d'éditer/supprimer tous
les content-types (les siens et ceux des autres)
- League
- Articles
- Basic pages

Créer un rôle Servitore:
- Mêmes permissions que Schiavo + Administrer les blocks
---


----- THEMING ---

---
Créer et styliser un pied page.
Définir une couleur de fond, taille de police, etc.
Le pied de page devra contenir ces informations:
  Lien vers une page "Mentions légales" (à créer)
  La mention "Copyright 2017 Tous droits réservés"
  L'adresse email du webmaster
Ces informations pourront être modifiées par un administrateur
---

---
Sur la page /players, mettre une marge de 10px entre
le prénom du joueur et sa photo
---


--
1. Ajouter une région 'preheader' à positionner avant la region header
2. Placer/styliser le menu de login/logout dans la région preheader
3. Donner au block Search une apparence similaire aux autres blocks
de la région sidebar
--

--
Sur la page /players, ajouter une case à cocher "Afficher photos"
Lorsque la case est cochée les photos de joueurs sont visibles
Lorsque la case est décochée les photos de joueurs sont masquées
--


----- JS / AJAX -----

--
Ajouter dans le dom un bouton 'Démarrer slideshow'
Au clic sur ce bouton, démarrer l'animation

bonus: donner à l'utilisateur la possiblité d'indiquer la durée
de l'intervalle
--

--
Dans l'application "searchTool", afficher dans le DOM
le nombre de cartes trouvées lors de la recherche
--

--
Dans l'application "cardsTable", afficher les types/couleurs des cartes
en français (avec accents et majuscule initiale)
--

--
Dans l'application "cardsTable 2", ajouter au tableau
une colonne "Popularité".
Vous placerez dans cette colonne une icône de coeur.
A droite du coeur apparaîtra un indice de popularité
(exemple: 5) correspondant au nombre de votes/clics sur le coeur
Le clic sur le coeur devra incrémenter l'indice de popularité
--

--
Ajouter le tri par popularité
--

--
Dans l'application Cards Table 2:
Au survol du nom de la carte, afficher la photo associée

si le paramètre app.defaultImg vaut true:
  Afficher une image par défaut pour la carte quand la propriété
img n'est pas définie
--

--
Au niveau de l'application Cards Table 3

1/ Ajouter une colonne "Illustrateur" qui affichera
le nom de l'illustrateur de la carte.
Cette information proviendra d'une table SQL "illustrator" en
relation 1-1  avec la table card (à une carte correspond 1 illus.)
Un illustrateur: id, lastname, firstname, country

2/ Ajouter un filtre par Edition

3/ Au survol du nom de l'édition, faire apparaître sous
forme d'un "pop-up" les dates de début et de fin de l'édition
--


--
ED: Créer une application studentApp

1/ Dans la base ajax, ajouter 3 tables
  student: id, lastname, firstname
  exam: id, topic, date
  result: id, student_id, exam_id, note
Insérer des données manuellement dans les tables

Côté client
2/
Faire une requête ajax pour obtenir les données.
Afficher un tableau avec:
  Le nom de l'étudiant
  Le prénom de l'étudiant
  La moyenne des notes obtenues aux examens subis

3/ Au survol de la moyenne, un popup affichera
le détails des notes.
--


----- DRUPAL DEV MODULE -----

--
Ajouter dans le module intro une route renvoyant un formulaire.
Ce formulaire permettra à l'administrateur d'enregistrer,
via un champ de saisie, un nombre quelconque (exemple: 17).

Sur la page /greet, on affichera, n fois le message de souhait où
n correspond au nombre enregistré via la formulaire précédent
--

--
Sur la page /greet
En plus du contenu actuel, afficher un proverbe.
Le proverbe sera fourni de manière aléatoire pour le service
intro.proverb. L'indice aléatoire sera déterminé par rand($min, $max)
La source de données (tableau de proverbes - chaînes de carac.)
sera définie au niveau du service.
--

--
Créer une nouvelle route '/proverbs'
Elle affichera la liste des proverbes fournis
par le service intro.proverb
Ajouter dans le menu principal un lien vers cette route
--

--
Dans le module proverb:
Ajouter une route /list-banned
Elle affichera la liste des proverbes "bannis"
Les proverbes bannis sont ceux contenant dans leur titre
le mot "argent".
N.B: trouver la fonction PHP permettant de rechercher
une chaîne dans une autre

V2
Ajouter une route /list-banned-2
Elle affichera la liste des proverbes "bannis"
Les proverbes bannis sont ceux contenant dans leur titre
au moins un mot parmi un ensemble de mots.
Les mots constituant cet ensemble seront enregistrables via
un formulaire
--


--
Dans le module proverb, ajouter une route /banned-words
affichant la liste des mots interdits sous forme de tableau.
Cette route sera accessible uniquement pour l'administrateur.
Utiliser le service database et la méthode select du query builder.
--

--
Ajouter un champ category (text plain) au node.proverb via l'UI.
Editer quelques proverbes afin de leur associer une catégorie.
Ex: "amitié", "travail", etc...
Ajouter une route qui affichera les proverbes en rapport avec un
nom de catégorie passée en paramètre Url
Ex: /proverbs/category/travail
--

--
"Nettoyer" les titres des proverbes en elevant
les guillemets situés en début et fin de chaîne

/* Pour mettre à jour une entité. */
1. Charger l'entité (Node::load($id))
2. Mettre le jour le champs souhaité par le biais d'un setter
(ex: $node->setTitle('nouvelle valeur'))
3. Sauvegarder ($node->save())

Faire ce travail dans un controller spécifique: CleanController
Utiles: les fonctions substr et strlen

Variante2:
Proposer un formulaire de configuration avec
  - un radio button "Ajouter/supprimer caractère"
  - un textfield permettant de saisir un caractère
  - un menu déroulant avec comme options les types de node (article, proveb, etc.)

A la soumission du formulaire, en fonction du choix sur le radion button
Le caractère saisi sera ajouté (ou supprimé) au titre des nodes du type
sélectionné
--

--
Dans le module proverb, ajouter un block (classe:"ProverbBlock").
Ce bloc (à placer dans la région sidebar-first) affichera:
 - les 3 derniers proverbes enregistrés si user anonyme
 - les 5 derniers proverbes enregistrés si user admin
--







----------
